// Prisma Schema - Hedwige Database
// Défi #15 - Workshop Poudlard RP 2025

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Note: @@fulltext n'est pas supporté avec PostgreSQL
// On utilise des index normaux à la place

// ============================================
// MODÈLES UTILISATEURS ET AUTHENTIFICATION
// ============================================

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  password      String?   // Nullable si OAuth uniquement
  emailVerified Boolean   @default(false)
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  emails        Email[]
  contacts      Contact[]
  oauthServices OAuthService[]
  sessions      Session[]
  
  @@index([email])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([refreshToken])
}

model OAuthService {
  id           String   @id @default(uuid())
  userId       String
  provider     String   // google, microsoft, github
  providerId   String   // ID chez le provider
  accessToken  String   // Chiffré
  refreshToken String?  // Chiffré
  expiresAt    DateTime?
  scope        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerId])
  @@index([userId])
}

// ============================================
// MODÈLES EMAILS
// ============================================

model Email {
  id          String    @id @default(uuid())
  userId      String
  messageId   String?   @unique // ID du message email
  from        String
  to          String[]
  cc          String[]  @default([])
  bcc         String[]  @default([])
  subject     String
  body        String    @db.Text
  html        String?   @db.Text
  folder      String    @default("inbox") // inbox, sent, drafts, trash
  isRead      Boolean   @default(false)
  isDraft     Boolean   @default(false)
  isStarred   Boolean   @default(false)
  attachments Json?     // Array of attachment metadata
  receivedAt  DateTime?
  sentAt      DateTime?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([folder])
  @@index([isRead])
  @@index([createdAt])
  @@index([subject])
  @@index([from])
}

// ============================================
// MODÈLES CONTACTS
// ============================================

model Contact {
  id        String   @id @default(uuid())
  userId    String
  name      String
  email     String
  avatar    String?
  phone     String?
  company   String?
  notes     String?  @db.Text
  isFavorite Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, email])
  @@index([userId])
  @@index([email])
}

// ============================================
// MODÈLES CONFIGURATION
// ============================================

model EmailAccount {
  id            String   @id @default(uuid())
  userId        String
  email         String
  provider      String   // gmail, outlook, custom
  imapHost      String
  imapPort      Int
  imapSecure    Boolean  @default(true)
  smtpHost      String
  smtpPort      Int
  smtpSecure    Boolean  @default(false)
  username      String
  password      String   // Chiffré
  isDefault     Boolean  @default(false)
  isActive      Boolean  @default(true)
  lastSyncAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([userId, email])
  @@index([userId])
}

