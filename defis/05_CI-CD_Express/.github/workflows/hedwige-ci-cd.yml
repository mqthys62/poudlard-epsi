name: 🦉 Hedwige CI/CD - Voie 9¾

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'defis/15_Hedwige/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'defis/15_Hedwige/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/hedwige-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/hedwige-frontend

jobs:
  # ==========================================
  # JOB 1: LINTING & CODE QUALITY
  # ==========================================
  lint:
    name: 🔍 Code Linting & Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            defis/15_Hedwige/backend/package-lock.json
            defis/15_Hedwige/frontend/package-lock.json
      
      - name: 📚 Install Backend Dependencies
        working-directory: defis/15_Hedwige/backend
        run: npm ci
      
      - name: 📚 Install Frontend Dependencies
        working-directory: defis/15_Hedwige/frontend
        run: npm ci
      
      - name: 🔎 Lint Backend (ESLint + Airbnb)
        working-directory: defis/15_Hedwige/backend
        run: npm run lint
      
      - name: 🔎 Lint Frontend (ESLint + Airbnb)
        working-directory: defis/15_Hedwige/frontend
        run: npm run lint
      
      - name: 🎨 Check Backend Code Format (Prettier)
        working-directory: defis/15_Hedwige/backend
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json}"
      
      - name: 🎨 Check Frontend Code Format (Prettier)
        working-directory: defis/15_Hedwige/frontend
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json}"

  # ==========================================
  # JOB 2: UNIT TESTS
  # ==========================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: hedwige_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            defis/15_Hedwige/backend/package-lock.json
            defis/15_Hedwige/frontend/package-lock.json
      
      - name: 📚 Install Backend Dependencies
        working-directory: defis/15_Hedwige/backend
        run: npm ci
      
      - name: 📚 Install Frontend Dependencies
        working-directory: defis/15_Hedwige/frontend
        run: npm ci
      
      - name: 🗄️ Setup Test Database
        working-directory: defis/15_Hedwige/backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/hedwige_test
        run: |
          npx prisma migrate deploy
          npx prisma generate
      
      - name: 🧪 Run Backend Unit Tests
        working-directory: defis/15_Hedwige/backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/hedwige_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
          JWT_REFRESH_SECRET: test_refresh_secret
          NODE_ENV: test
        run: npm run test -- --coverage --passWithNoTests
      
      - name: 🧪 Run Frontend Unit Tests
        working-directory: defis/15_Hedwige/frontend
        run: npm run test -- --coverage --passWithNoTests
      
      - name: 📊 Upload Backend Coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./defis/15_Hedwige/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
      
      - name: 📊 Upload Frontend Coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./defis/15_Hedwige/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
      
      - name: ✅ Check Coverage Threshold (>80%)
        working-directory: defis/15_Hedwige/backend
        run: |
          COVERAGE=$(npx nyc report --reporter=text-summary | grep 'Lines' | awk '{print $3}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage is below 80%: $COVERAGE%"
            exit 1
          else
            echo "✅ Coverage is above 80%: $COVERAGE%"
          fi

  # ==========================================
  # JOB 3: INTEGRATION & NON-REGRESSION TESTS
  # ==========================================
  integration-tests:
    name: 🔗 Integration & Non-Regression Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐳 Start Docker Compose Services
        working-directory: defis/15_Hedwige
        run: |
          docker-compose up -d postgres redis mailhog
          sleep 10
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: 📚 Install Dependencies
        working-directory: defis/15_Hedwige/backend
        run: npm ci
      
      - name: 🗄️ Run Migrations
        working-directory: defis/15_Hedwige/backend
        env:
          DATABASE_URL: postgresql://hedwige_user:hedwige_password_dev@localhost:5432/hedwige
        run: |
          npx prisma migrate deploy
          npx prisma generate
      
      - name: 🧪 Run Integration Tests
        working-directory: defis/15_Hedwige/backend
        env:
          DATABASE_URL: postgresql://hedwige_user:hedwige_password_dev@localhost:5432/hedwige
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
          SMTP_HOST: localhost
          SMTP_PORT: 1025
          IMAP_HOST: localhost
          IMAP_PORT: 1025
        run: npm run test:integration -- --passWithNoTests
      
      - name: 🔄 Run Non-Regression Tests
        working-directory: defis/15_Hedwige
        run: |
          # Tester que l'API répond
          curl -f http://localhost:3001/health || exit 1
          # Tester que le frontend build correctement
          cd frontend && npm run build
      
      - name: 🛑 Stop Docker Services
        if: always()
        working-directory: defis/15_Hedwige
        run: docker-compose down

  # ==========================================
  # JOB 4: DOCKER BUILD & TEST
  # ==========================================
  docker-build:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🏗️ Build ${{ matrix.service }} Image
        uses: docker/build-push-action@v5
        with:
          context: ./defis/15_Hedwige/${{ matrix.service }}
          file: ./defis/15_Hedwige/${{ matrix.service }}/Dockerfile
          target: development
          push: false
          tags: hedwige-${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 🧪 Test Docker Image
        run: |
          docker run --rm hedwige-${{ matrix.service }}:test node --version
          docker images hedwige-${{ matrix.service }}:test
      
      - name: 🔍 Scan Image for Vulnerabilities (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: hedwige-${{ matrix.service }}:test
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
      
      - name: 📤 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # ==========================================
  # JOB 5: SONARQUBE ANALYSIS
  # ==========================================
  sonarqube:
    name: 📊 SonarQube Quality Analysis
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: 📚 Install Dependencies
        run: |
          cd defis/15_Hedwige/backend && npm ci
          cd ../frontend && npm ci
      
      - name: 🧪 Generate Coverage Reports
        run: |
          cd defis/15_Hedwige/backend && npm run test:coverage -- --passWithNoTests
          cd ../frontend && npm run test -- --coverage --passWithNoTests
      
      - name: 📊 SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: defis/15_Hedwige
          args: >
            -Dsonar.projectKey=poudlard-hedwige
            -Dsonar.sources=backend/src,frontend/src
            -Dsonar.tests=backend/src/**/*.test.ts,frontend/src/**/*.test.tsx
            -Dsonar.typescript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info
            -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info
            -Dsonar.exclusions=**/*.test.ts,**/*.test.tsx,**/node_modules/**,**/dist/**
      
      - name: ✅ SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ==========================================
  # JOB 6: BUILD & PUSH DOCKER IMAGES
  # ==========================================
  build-and-push:
    name: 🚀 Build & Push Images
    runs-on: ubuntu-latest
    needs: [unit-tests, docker-build, sonarqube]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🏗️ Build and Push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./defis/15_Hedwige/${{ matrix.service }}
          file: ./defis/15_Hedwige/${{ matrix.service }}/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================
  # JOB 7: DEPLOY TO PRODUCTION
  # ==========================================
  deploy:
    name: 🚢 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://hedwige.poudlard.epsi.fr
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔐 Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
      
      - name: 🚀 Deploy via SSH
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          ssh $SSH_USER@$SSH_HOST << 'ENDSSH'
            cd /opt/hedwige
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker image prune -f
          ENDSSH
      
      - name: 🏥 Health Check
        run: |
          sleep 30
          curl -f ${{ secrets.PROD_URL }}/health || exit 1
      
      - name: 📢 Notify Deployment Success
        if: success()
        run: echo "✅ Deployment successful to production!"
      
      - name: 📢 Notify Deployment Failure
        if: failure()
        run: echo "❌ Deployment failed!"

  # ==========================================
  # JOB 8: NOTIFICATION
  # ==========================================
  notify:
    name: 📬 Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: 📧 Send Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Pipeline CI/CD réussi ! Hedwige est déployé en production."
      
      - name: 📧 Send Failure Notification
        if: needs.deploy.result != 'success'
        run: |
          echo "⚠️ Pipeline CI/CD échoué. Vérifier les logs."

